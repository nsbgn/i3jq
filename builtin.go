// Code generated by go generate; DO NOT EDIT.
// See builtin.generator.go for more information
package main
import . "github.com/itchyny/gojq"
import "github.com/itchyny/gojq"

func LoadBuiltin(name string) *gojq.Query {
	switch(name){
	case "base":
		return &Query{Meta: &ConstObject{KeyVals: []*ConstObjectKeyVal{{Key: "name", Val: &ConstTerm{Str: "builtin"}}}}, Imports: []*Import{{ImportPath: "i3jq@ipc", ImportAlias: "ipc"}, {ImportPath: "i3jq@tree", ImportAlias: "tree"}}}
	case "ipc":
		return &Query{Meta: &ConstObject{KeyVals: []*ConstObjectKeyVal{{Key: "name", Val: &ConstTerm{Str: "ipc"}}, {Key: "description", Val: &ConstTerm{Str: "Filters for inter-process communication."}}}}, FuncDefs: []*FuncDef{{Name: "run_command", Args: []string{"$payload"}, Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "0"}}, {Func: "$payload"}, {Func: "false"}}}}}}, {Name: "get_workspaces", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "1"}}, {Func: "null"}, {Func: "false"}}}}}}, {Name: "subscribe", Args: []string{"$payload"}, Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "2"}}, {Left: &Query{Func: "$payload"}, Op: gojq.OpPipe, Right: &Query{Func: "tostring"}}, {Func: "true"}}}}}}, {Name: "get_outputs", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "3"}}, {Func: "null"}, {Func: "false"}}}}}}, {Name: "get_tree", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "4"}}, {Func: "null"}, {Func: "false"}}}}}}, {Name: "get_marks", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "5"}}, {Func: "null"}, {Func: "false"}}}}}}, {Name: "get_bar_config", Args: []string{"$payload"}, Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "6"}}, {Func: "$payload"}, {Func: "false"}}}}}}, {Name: "get_bar_config", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "get_bar_config", Args: []*Query{{Func: "null"}}}}}}, {Name: "get_version", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "7"}}, {Func: "null"}, {Func: "false"}}}}}}, {Name: "get_binding_modes", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "8"}}, {Func: "null"}, {Func: "false"}}}}}}, {Name: "get_config", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "9"}}, {Func: "null"}, {Func: "false"}}}}}}, {Name: "send_tick", Args: []string{"$payload"}, Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "10"}}, {Func: "$payload"}, {Func: "false"}}}}}}, {Name: "sync", Args: []string{"$payload"}, Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "11"}}, {Func: "$payload"}, {Func: "false"}}}}}}, {Name: "get_binding_state", Args: []string{"$payload"}, Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "_i3jq", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "12"}}, {Func: "$payload"}, {Func: "false"}}}}}}, {Name: "do", Args: []string{"commands"}, Body: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeArray, Array: &Array{Query: &Query{Func: "commands"}}}}, Op: gojq.OpPipe, Right: &Query{Left: &Query{Func: "flatten"}, Op: gojq.OpPipe, Right: &Query{Term: &Term{Type: gojq.TermTypeIf, If: &If{Cond: &Query{Left: &Query{Func: "."}, Op: gojq.OpEq, Right: &Query{Term: &Term{Type: gojq.TermTypeArray, Array: &Array{}}}}, Then: &Query{Func: "empty"}, Else: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "join", Args: []*Query{{Term: &Term{Type: gojq.TermTypeString, Str: &String{Str: "; "}}}}}}}, Op: gojq.OpPipe, Right: &Query{Term: &Term{Type: gojq.TermTypeObject, Object: &Object{KeyVals: []*ObjectKeyVal{{Key: "command", Val: &Query{Func: "."}}, {Key: "result", Val: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "run_command", Args: []*Query{{Func: "."}}}}}}}}}}}}}}}}}}}
	case "tree":
		return &Query{Meta: &ConstObject{KeyVals: []*ConstObjectKeyVal{{Key: "name", Val: &ConstTerm{Str: "tree"}}}}, FuncDefs: []*FuncDef{{Name: "focus_child", Args: []string{"$n"}, Body: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "focus"}, SuffixList: []*Suffix{{Index: &Index{Start: &Query{Func: "$n"}}}, {Bind: &Bind{Patterns: []*Pattern{{Name: "$id"}}, Body: &Query{Left: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "floating_nodes"}, SuffixList: []*Suffix{{Iter: true}}}}, Op: gojq.OpComma, Right: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "nodes"}, SuffixList: []*Suffix{{Iter: true}}}}}, Op: gojq.OpPipe, Right: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "select", Args: []*Query{{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "id"}}}, Op: gojq.OpEq, Right: &Query{Func: "$id"}}}}}}}}}}}}}, {Name: "focus_child", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "focus_child", Args: []*Query{{Term: &Term{Type: gojq.TermTypeNumber, Number: "0"}}}}}}}, {Name: "focus", Args: []string{"cond"}, Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "until", Args: []*Query{{Func: "cond"}, {Func: "focus_child"}}}}}}, {Name: "focus", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "focus", Args: []*Query{{Left: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "nodes"}}}, Op: gojq.OpEq, Right: &Query{Term: &Term{Type: gojq.TermTypeArray, Array: &Array{}}}}, Op: gojq.OpAnd, Right: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "floating_nodes"}}}, Op: gojq.OpEq, Right: &Query{Term: &Term{Type: gojq.TermTypeArray, Array: &Array{}}}}}}}}}}, {Name: "find", Args: []string{"condition"}, Body: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "first", Args: []*Query{{Left: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "recurse", Args: []*Query{{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "nodes"}, SuffixList: []*Suffix{{Iter: true}}}}, Op: gojq.OpComma, Right: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "floating_nodes"}, SuffixList: []*Suffix{{Iter: true}}}}}}}}}, Op: gojq.OpPipe, Right: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "select", Args: []*Query{{Func: "condition"}}}}}}}}}}, Op: gojq.OpAlt, Right: &Query{Func: "null"}}}, {Name: "find_all", Args: []string{"condition"}, Body: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "recurse", Args: []*Query{{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "nodes"}, SuffixList: []*Suffix{{Iter: true}}}}, Op: gojq.OpComma, Right: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "floating_nodes"}, SuffixList: []*Suffix{{Iter: true}}}}}}}}}, Op: gojq.OpPipe, Right: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "select", Args: []*Query{{Func: "condition"}}}}}}}, {Name: "scratchpad", Body: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "nodes"}, SuffixList: []*Suffix{{Iter: true}}}}, Op: gojq.OpPipe, Right: &Query{Left: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "select", Args: []*Query{{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "name"}}}, Op: gojq.OpEq, Right: &Query{Term: &Term{Type: gojq.TermTypeString, Str: &String{Str: "__i3"}}}}}}}}, Op: gojq.OpPipe, Right: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "nodes"}, SuffixList: []*Suffix{{Index: &Index{Start: &Query{Term: &Term{Type: gojq.TermTypeNumber, Number: "0"}}}}}}}}}}, {Name: "tiles", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "recurse", Args: []*Query{{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "nodes"}, SuffixList: []*Suffix{{Iter: true}}}}}}}}}, {Name: "leaves", Body: &Query{Term: &Term{Type: gojq.TermTypeFunc, Func: &Func{Name: "recurse", Args: []*Query{{Left: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "nodes"}, SuffixList: []*Suffix{{Iter: true}}}}, Op: gojq.OpComma, Right: &Query{Term: &Term{Type: gojq.TermTypeIndex, Index: &Index{Name: "floating_nodes"}, SuffixList: []*Suffix{{Iter: true}}}}}}}}}}}}
	default:
		return nil
	}
}